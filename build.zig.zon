.{
    // これは、このパッケージに依存するパッケージがデフォルトで使用する名前である。
    // 例えば、ユーザーが `zig fetch --save <url>` を実行すると、
    // `dependencies` テーブルのキーとしてこのフィールドの値が使用される。
    // ユーザーは別の名前を選択することもできるが、ほとんどのユーザーは
    // ここで提供された値をそのまま使用する。
    //
    // すでに Zig のパッケージ名前空間内にあるため、この名前に "zig" を含めるのは冗長である。
    .name = "zag",

    // これは [セマンティックバージョン](https://semver.org/) である。
    // 将来の Zig のバージョンでは、パッケージの重複排除に使用される予定。
    .version = "0.0.0",

    // このフィールドはオプションである。
    // 現時点では参考情報にすぎず、Zig はこの値をまだ使用しない。
    //.minimum_zig_version = "0.11.0",

    // このフィールドはオプションである。
    // 各依存関係は `url` と `hash` のペア、または `path` のいずれかを指定する必要がある。
    // `zig build --fetch` を使用すると、パッケージのすべての依存関係を再帰的に取得できる。
    // すべての依存関係が取得されると、`zig build` はもはやインターネット接続を必要としない。
    .dependencies = .{
        // 依存関係を追加するコマンドラインインターフェースについては、
        // `zig fetch --save <url>` を参照のこと。
        //.example = .{
        //    // このフィールドを新しい URL に更新する際は、
        //    // 対応する `hash` を削除すること。
        //    // そうしないと、新しい URL に古いハッシュがあることを期待していると解釈される。
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // これは、`url` から取得した後に適用される `paths` の
        //    // ルールに基づいて生成されたディレクトリ内のファイル内容から計算される。
        //    //
        //    // このフィールドが唯一の信頼できる情報源である。
        //    // パッケージは `url` から取得されるのではなく、`hash` から取得される。
        //    // `url` はこの `hash` に一致するパッケージを取得する手段の 1 つにすぎない。
        //    //
        //    // [multihash](https://multiformats.io/multihash/) フォーマットを使用する。
        //    .hash = "...",
        //
        //    // これが指定されると、パッケージはビルドルートからの相対パスで
        //    // 指定されたディレクトリ内にあるものと見なされる。
        //    // この場合、パッケージの `hash` は不要となり、計算されない。
        //    // このフィールドと `url` は相互に排他的である。
        //    .path = "foo",

        //    // これを `true` に設定すると、パッケージは遅延フェッチされることを宣言する。
        //    // これにより、その依存関係が実際に使用される場合にのみ取得されるようになる。
        //    .lazy = false,
        //},
    },

    // このパッケージに含まれるファイルやディレクトリのセットを指定する。
    // ここにリストされたファイルとディレクトリのみが `hash` 計算の対象となる。
    // また、Zig パッケージマネージャーを使用する場合、ディスク上に残るのは
    // ここにリストされたファイルのみとなる。
    // 基本的には、コンパイルに必要なファイルとライセンスファイルを含めるのが適切。
    //
    // パスはビルドルートからの相対パスで指定する。
    // 空文字列 (`""`) を指定すると、ビルドルートそのものを指す。
    // ディレクトリをリストに追加すると、そのディレクトリ内のすべてのファイルが
    // 再帰的に含まれる。
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        // 例えば...
        //"LICENSE",
        //"README.md",
    },
}
